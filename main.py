# bot.py
import os
import json
import re
from datetime import datetime, timedelta, timezone
from telegram import Update, ChatPermissions, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
import google.generativeai as genai
from dotenv import load_dotenv
import asyncio
# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not BOT_TOKEN:
    raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ BOT_TOKEN –∑ .env —Ñ–∞–π–ª—É")
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Gemini
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-2.5-flash-lite')
else:
     model = None # –ë–µ–∑ –∫–ª—é—á–∞ –ò–ò –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
# –§–∞–π–ª–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
DATA_FILE = "bot_data.json"
CONVERSATIONS_FILE = "conversations.json"
# === –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –§–ê–ô–õ–ê–ú–ò ===
def load_json(filename):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î JSON –∑ —Ñ–∞–π–ª—É"""
    if os.path.exists(filename):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {filename}: {e}")
            return {}
    return {}
def save_json(filename, data):
    """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –≤ JSON-—Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2, default=str)
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è {filename}: {e}")
# === –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –ö–û–ù–¢–ï–ö–°–¢–û–ú ===
async def get_user_name(user):
    """–û—Ç—Ä–∏–º—É—î —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return user.first_name or user.username or f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id}"
async def get_conversation_context(user_id):
    """–û—Ç—Ä–∏–º—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    conversations = load_json(CONVERSATIONS_FILE)
    user_conv = conversations.get(str(user_id), {})
    return user_conv.get("history", [])
async def save_conversation_step(user_id, user_message, bot_response, user_name):
    """–ó–±–µ—Ä—ñ–≥–∞—î –∫—Ä–æ–∫ —Ä–æ–∑–º–æ–≤–∏"""
    conversations = load_json(CONVERSATIONS_FILE)
    if str(user_id) not in conversations:
        conversations[str(user_id)] = {
            "name": user_name,
            "history": []
        }
    conv = conversations[str(user_id)]
    conv["name"] = user_name
    conv["history"].extend([user_message, bot_response])
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if len(conv["history"]) > 10:
        conv["history"] = conv["history"][-10:]
    save_json(CONVERSATIONS_FILE, conversations)
# === –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –î–ê–ù–ò–ú–ò –ë–û–¢–ê ===
def load_persistent_data():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –±–æ—Ç–∞ –∑ —Ñ–∞–π–ª—É"""
    return load_json(DATA_FILE)
def save_persistent_data(data):
    """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –±–æ—Ç–∞ —É —Ñ–∞–π–ª"""
    save_json(DATA_FILE, data)
async def post_init(application):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ"""
    persistent_data = load_persistent_data()
    application.bot_data.update(persistent_data)
    print("–î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É")
def save_bot_data(context: ContextTypes.DEFAULT_TYPE):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –±–æ—Ç–∞"""
    save_persistent_data(context.bot_data)
# === –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –ü–†–ê–í –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê ===
async def is_user_admin(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        user = await context.bot.get_chat_member(chat_id, user_id)
        return user.status in ['administrator', 'creator']
    except:
        return False
# === –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –ß–ê–°–û–ú ===
def parse_duration(duration_str: str) -> timedelta:
    """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Å—Ç—Ä–æ–∫—É —Ç–∏–ø—É 5h —É timedelta"""
    match = re.match(r"(\d+)([mhw])", duration_str)
    if not match:
        raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: 10m, 2h, 1w")
    value, unit = int(match.group(1)), match.group(2)
    if unit == 'm':
        return timedelta(minutes=value)
    elif unit == 'h':
        return timedelta(hours=value)
    elif unit == 'w':
        return timedelta(weeks=value)
    else:
        raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É.")
# === –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –†–û–ó–ú–£–¢–£ ===
async def auto_unmute_callback(context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü—ñ—è, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—é —á–∞—Å—É –º—É—Ç–∞."""
    job = context.job
    chat_id = job.data['chat_id']
    user_id = job.data['user_id']
    username = job.data['username']
    bot = context.bot
    try:
        # –†–æ–∑–º—É—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_polls=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_change_info=False,
                can_invite_users=True,
                can_pin_messages=False
            )
        )
        # –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ø–∏—Å–∫—É –∑–∞–º—É—á–µ–Ω–∏—Ö
        muted_data = context.bot_data.get("muted_users", {}).get(str(chat_id), {})
        if str(user_id) in muted_data:
            del muted_data[str(user_id)]
            save_persistent_data(context.bot_data)
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç
        unmute_msg = f"‚è∞ –¢–∞–π–º–µ—Ä –º—É—Ç–∞ @{username} –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ö–ª—è–ø –∑–Ω—è—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ."
        await bot.send_message(chat_id=chat_id, text=unmute_msg)
        print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–º—É—á–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (ID: {user_id}) –≤ —á–∞—Ç—ñ {chat_id}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É —Ä–æ–∑–º—É—Ç—ñ {username} (ID: {user_id}) –≤ —á–∞—Ç—ñ {chat_id}: {e}")
# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–Ü –§–£–ù–ö–¶–Ü–á ===
async def safe_delete_message(chat_id: int, message_id: int, bot):
    """–ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫."""
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        print(f"üóëÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–∞—Ç—É {chat_id}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –∑ —á–∞—Ç—É {chat_id}: {e}")
async def schedule_message_deletion(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int, delay: int):
    """–ü–ª–∞–Ω—É—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø–µ–≤–Ω–∏–π —á–∞—Å."""
    context.job_queue.run_once(
        callback=lambda ctx: asyncio.create_task(safe_delete_message(chat_id, message_id, ctx.bot)),
        when=delay,
        data={'chat_id': chat_id, 'message_id': message_id}
    )
# === –ö–û–ú–ê–ù–î–ò –ë–û–¢–ê ===
# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    if update.effective_chat.type != "private":
        # –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await schedule_message_deletion(context, update.effective_chat.id, update.message.message_id, 10)
        return
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω–æ–º —Ö–æ—á–∞ –± –≤ –æ–¥–Ω—ñ–π –≥—Ä—É–ø—ñ
    user_id = update.effective_user.id
    groups = context.bot_data.get("groups", {})
    is_admin_anywhere = False
    for group_id in groups:
        if await is_user_admin(context, int(group_id) if isinstance(group_id, str) else group_id, user_id):
            is_admin_anywhere = True
            break
    if not is_admin_anywhere:
        msg = await update.message.reply_text("–Ø –≤–ø–∏—Ö–Ω—É –∫–ª—è–ø —Ç–æ–±—ñ, —è–∫—â–æ –ø—Ä–æ–¥–æ–≤–∂–∏—à —Ç–∏–∫–∞—Ç–∏.")
        await schedule_message_deletion(context, update.effective_chat.id, msg.message_id, 10)
        await schedule_message_deletion(context, update.effective_chat.id, update.message.message_id, 10)
        return
    keyboard = [
        [InlineKeyboardButton("–ú—É—Ç–∏ üîá", callback_data="show_groups")],
        [InlineKeyboardButton("Gemini –ü–µ—Ä—Å–æ–Ω–∞ ü§ñ", callback_data="gemini_personality")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    msg = await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º—É—Ç–∞–º–∏.", reply_markup=reply_markup)
    await schedule_message_deletion(context, update.effective_chat.id, update.message.message_id, 10)
    # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
# –ö–æ–º–∞–Ω–¥–∞ /date - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏
async def date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /date - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    chat = update.effective_chat
    if not context.args:
        msg = await update.message.reply_text("""–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: /date –Ü–º'—è, –≤—ñ–∫, —Ü—ñ–ª—ñ, —ñ–Ω—Ç–µ—Ä–µ—Å–∏
–ü—Ä–∏–∫–ª–∞–¥: /date –°–µ—Ä–≥—ñ–π, 25 —Ä–æ–∫—ñ–≤. –¢—É—Ç –ø–æ —Ñ–∞–Ω—É!""")
        await schedule_message_deletion(context, chat.id, msg.message_id, 10)
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return
    profile_text = " ".join(context.args)
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–Ω–∫–µ—Ç—É
    profiles = context.bot_data.setdefault("profiles", {})
    profiles[str(user.id)] = {
        "username": user.username,
        "first_name": user.first_name,
        "profile": profile_text,
        "created_at": datetime.now().isoformat()
    }
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞ –¥–∏—Å–∫
    save_bot_data(context)
    # msg = await update.message.reply_text(f"@{user.username or user.first_name} –†–∞–¥–∏–π –∑–Ω–∞–π–æ–º—Å—Ç–≤—É! –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–±–µ—Ä—ñ–≥. –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ /who @username –∞–±–æ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ü—ñ—î—ó –ª—é–¥–∏–Ω–∏.")
    # await schedule_message_deletion(context, chat.id, msg.message_id, 10)
    # await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
    # return
    await update.message.reply_text(f"@{user.username or user.first_name} –†–∞–¥–∏–π –∑–Ω–∞–π–æ–º—Å—Ç–≤—É! –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–±–µ—Ä—ñ–≥. –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ /who @username –∞–±–æ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ü—ñ—î—ó –ª—é–¥–∏–Ω–∏.")
    await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
    # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
# –ö–æ–º–∞–Ω–¥–∞ /who - –ø–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–∫–µ—Ç–∏
async def who(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /who - –ø–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–∫–µ—Ç–∏ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = update.effective_user
    chat = update.effective_chat
    target_user = None
    # –Ø–∫—â–æ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
    # –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ @username
    elif context.args:
        username = context.args[0].lstrip('@')
        # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ profiles
        profiles = context.bot_data.get("profiles", {})
        for user_id, profile_data in profiles.items():
            if profile_data.get("username") == username:
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π –æ–±'—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                from telegram import User
                target_user = User(id=int(user_id), first_name=profile_data.get("first_name", ""), username=username, is_bot=False)
                break
        else:
            msg = await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –Ω—å–æ–≥–æ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏.")
            await schedule_message_deletion(context, chat.id, msg.message_id, 10)
            await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
            return
    else:
        msg = await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: /who @username –∞–±–æ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await schedule_message_deletion(context, chat.id, msg.message_id, 10)
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return
    if not target_user:
        msg = await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        await schedule_message_deletion(context, chat.id, msg.message_id, 10)
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–Ω–∫–µ—Ç—É
    profiles = context.bot_data.get("profiles", {})
    user_profile = profiles.get(str(target_user.id))
    if not user_profile:
        msg = await update.message.reply_text("–£ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –∞–Ω–∫–µ—Ç–∏.")
        await schedule_message_deletion(context, chat.id, msg.message_id, 10)
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return
    profile_text = user_profile.get("profile", "–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó")
    username = target_user.username or target_user.first_name
    response = f"üë§ @{username}\n{profile_text}"
    # msg = await update.message.reply_text(response)
    # await schedule_message_deletion(context, chat.id, msg.message_id, 10)
    # await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
    # return
    await update.message.reply_text(response)
    await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
    # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
# –ö–æ–º–∞–Ω–¥–∞ /muty
async def muty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /muty - –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫—É –º—É—Ç—ñ–≤"""
    user_id = update.effective_user.id
    chat = update.effective_chat
    if not chat:
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return
    # –í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ - –ø–æ–∫–∞–∑—É—î–º–æ –≥—Ä—É–ø–∏
    if chat.type == "private":
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω–æ–º —Ö–æ—á–∞ –± –≤ –æ–¥–Ω—ñ–π –≥—Ä—É–ø—ñ
        groups = context.bot_data.get("groups", {})
        user_groups = []
        for group_id_str, group_data in groups.items():
            group_id = int(group_id_str) if isinstance(group_id_str, str) else group_id_str
            if await is_user_admin(context, group_id, user_id):
                user_groups.append((group_id, group_data["title"]))
        if not user_groups:
            msg = await update.message.reply_text("–Ø –≤–ø–∏—Ö–Ω—É –∫–ª—è–ø —Ç–æ–±—ñ, —è–∫—â–æ –ø—Ä–æ–¥–æ–≤–∂–∏—à —Ç–∏–∫–∞—Ç–∏.")
            await schedule_message_deletion(context, chat.id, msg.message_id, 10)
            await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
            return
        buttons = []
        for group_id, title in user_groups:
            buttons.append([InlineKeyboardButton(title, callback_data=f"group_mutes_{group_id}")])
        if not buttons:
            msg = await update.message.reply_text("–Ø –≤–ø–∏—Ö–Ω—É –∫–ª—è–ø —Ç–æ–±—ñ, —è–∫—â–æ –ø—Ä–æ–¥–æ–≤–∂–∏—à —Ç–∏–∫–∞—Ç–∏.")
            await schedule_message_deletion(context, chat.id, msg.message_id, 10)
            await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
            return
        reply_markup = InlineKeyboardMarkup(buttons)
        msg = await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É:", reply_markup=reply_markup)
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
    # –í –≥—Ä—É–ø—ñ - –ø–æ–∫–∞–∑—É—î–º–æ –º—É—Ç—ñ–≤ —Ü—ñ—î—ó –≥—Ä—É–ø–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
    else:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω–∞
        if not await is_user_admin(context, chat.id, user_id):
            msg = await update.message.reply_text("–Ø –≤–ø–∏—Ö–Ω—É –∫–ª—è–ø —Ç–æ–±—ñ, —è–∫—â–æ –ø—Ä–æ–¥–æ–≤–∂–∏—à —Ç–∏–∫–∞—Ç–∏.")
            await schedule_message_deletion(context, chat.id, msg.message_id, 10)
            await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
            return
        # –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø—É –¥–æ —Å–ø–∏—Å–∫—É, —è–∫—â–æ —ó—ó —Ç–∞–º –Ω–µ–º–∞—î
        groups = context.bot_data.setdefault("groups", {})
        if str(chat.id) not in groups:
            groups[str(chat.id)] = {"title": chat.title or f"–ì—Ä—É–ø–∞ {chat.id}"}
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞ –¥–∏—Å–∫
            save_bot_data(context)
        muted_users = []
        try:
            muted_list = context.bot_data.get("muted_users", {}).get(str(chat.id), {})
            for user_id_str, data in muted_list.items():
                user_id_int = int(user_id_str) if isinstance(user_id_str, str) else user_id_str
                muted_users.append((user_id_int, data['username']))
        except Exception as e:
            msg = await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            await schedule_message_deletion(context, chat.id, msg.message_id, 10)
            await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
            return
        if not muted_users:
            msg = await update.message.reply_text("–ù–µ–º–∞—î –∑–∞–º—É—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
            await schedule_message_deletion(context, chat.id, msg.message_id, 10)
            await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
            return
        buttons = []
        for user_id, username in muted_users:
            buttons.append([InlineKeyboardButton(f"@{username}", callback_data=f"unmute_confirm_{user_id}_{chat.id}")])
        reply_markup = InlineKeyboardMarkup(buttons)
        msg = await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–ª—è–ø—ñ–≤:", reply_markup=reply_markup)
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
# –ö–æ–º–∞–Ω–¥–∞ /mute
async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /mute - –∑–∞–º—É—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not update.message or not update.message.from_user:
        return
    admin_user = update.message.from_user
    chat = update.effective_chat
    if not chat:
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω–∞
    if not await is_user_admin(context, chat.id, admin_user.id):
        msg = await update.message.reply_text("–Ø –≤–ø–∏—Ö–Ω—É –∫–ª—è–ø —Ç–æ–±—ñ, —è–∫—â–æ –ø—Ä–æ–¥–æ–≤–∂–∏—à —Ç–∏–∫–∞—Ç–∏.")
        await schedule_message_deletion(context, chat.id, msg.message_id, 10)
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return
    user_to_mute = None
    reason = ""
    duration_str = ""
    # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if update.message.reply_to_message:
        try:
            user_to_mute = await context.bot.get_chat_member(chat.id, update.message.reply_to_message.from_user.id)
            if user_to_mute is None:
                msg = await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                await schedule_message_deletion(context, chat.id, msg.message_id, 10)
                await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
                return
            args = context.args
            if args:
                duration_str = args[0]
                reason = " ".join(args[1:]) if len(args) > 1 else ""
            else:
                msg = await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –º—É—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5h).")
                await schedule_message_deletion(context, chat.id, msg.message_id, 10)
                await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
                return
        except Exception as e:
            msg = await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            await schedule_message_deletion(context, chat.id, msg.message_id, 10)
            await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
            return
    else:
        if not context.args:
            msg = await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            await schedule_message_deletion(context, chat.id, msg.message_id, 10)
            await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
            return
        first_arg = context.args[0]
        if first_arg.startswith('@') or first_arg.isdigit():
            try:
                user_to_mute = await context.bot.get_chat_member(chat.id, first_arg.lstrip('@'))
                if user_to_mute is None:
                    msg = await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ —É —á–∞—Ç—ñ.")
                    await schedule_message_deletion(context, chat.id, msg.message_id, 10)
                    await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
                    return
                remaining_args = context.args[1:]
                if not remaining_args:
                    msg = await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –º—É—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5h).")
                    await schedule_message_deletion(context, chat.id, msg.message_id, 10)
                    await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
                    return
                duration_str = remaining_args[0]
                reason = " ".join(remaining_args[1:]) if len(remaining_args) > 1 else ""
            except Exception as e:
                msg = await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
                await schedule_message_deletion(context, chat.id, msg.message_id, 10)
                await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
                return
        else:
            if len(context.args) < 2:
                msg = await update.message.reply_text("–ü–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –º–∞—î –±—É—Ç–∏ @username –∞–±–æ ID.")
                await schedule_message_deletion(context, chat.id, msg.message_id, 10)
                await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
                return
            for i in range(1, len(context.args)):
                arg = context.args[i]
                if arg.startswith('@') or arg.isdigit():
                    try:
                        user_to_mute = await context.bot.get_chat_member(chat.id, arg.lstrip('@'))
                        if user_to_mute is None:
                            msg = await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ —É —á–∞—Ç—ñ.")
                            await schedule_message_deletion(context, chat.id, msg.message_id, 10)
                            await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
                            return
                        duration_str = context.args[0]
                        reason_args = []
                        for j in range(i + 1, len(context.args)):
                            reason_args.append(context.args[j])
                        reason = " ".join(reason_args)
                        break
                    except Exception:
                        continue
            else:
                msg = await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
                await schedule_message_deletion(context, chat.id, msg.message_id, 10)
                await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
                return
    try:
        duration = parse_duration(duration_str)
    except ValueError as e:
        msg = await update.message.reply_text(str(e))
        await schedule_message_deletion(context, chat.id, msg.message_id, 10)
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return
    until_time = datetime.now(timezone.utc) + duration
    try:
        await context.bot.restrict_chat_member(
            chat_id=chat.id,
            user_id=user_to_mute.user.id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until_time
        )
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ bot_data
        muted_data = context.bot_data.setdefault("muted_users", {}).setdefault(str(chat.id), {})
        muted_data[str(user_to_mute.user.id)] = {
            "username": user_to_mute.user.username or user_to_mute.user.first_name,
            "until": until_time.isoformat()
        }
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞ –¥–∏—Å–∫
        save_bot_data(context)
        # –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø—É –¥–æ —Å–ø–∏—Å–∫—É, —è–∫—â–æ —ó—ó —Ç–∞–º –Ω–µ–º–∞—î
        groups = context.bot_data.setdefault("groups", {})
        if str(chat.id) not in groups:
            groups[str(chat.id)] = {"title": chat.title or f"–ì—Ä—É–ø–∞ {chat.id}"}
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞ –¥–∏—Å–∫
            save_bot_data(context)
        # --- –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑–º—É—Ç—É ---
        try:
            job_data = {
                'chat_id': chat.id,
                'user_id': user_to_mute.user.id,
                'username': user_to_mute.user.username or user_to_mute.user.first_name
            }
            context.job_queue.run_once(
                callback=auto_unmute_callback,
                when=until_time,
                data=job_data,
                name=f"unmute_{chat.id}_{user_to_mute.user.id}"
            )
            print(f"‚è∞ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–æ–∑–º—É—Ç –¥–ª—è {job_data['username']} –≤ {until_time}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ –∞–≤—Ç–æ-—Ä–æ–∑–º—É—Ç—É –¥–ª—è {user_to_mute.user.username or user_to_mute.user.first_name}: {e}")
        gif_url = "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExYzNiaXo0YTZod2J0NmUzOXJ5Ymtid3ZpMGcxMjUxMTZxY2dybjJmOSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/snCdBOKXIgIf2perjF/giphy.gif"
        mute_message = f"@{user_to_mute.user.username or user_to_mute.user.first_name}, –∫–ª—è–ø –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ @{admin_user.username or admin_user.first_name}! –ù–µ –±–∞–ª—É–π, —Ö–ª–æ–ø—á–∏–∫—É!"
        msg = await update.message.reply_animation(animation=gif_url, caption=mute_message)
        # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ–≤ –≤ –±–æ—Ç—ñ
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ–≤
            admins = await context.bot.get_chat_administrators(chat.id)
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            mute_msg = f"üîá @{admin_user.username or admin_user.first_name} –∑–∞–º—É—Ç–∏–≤ @{user_to_mute.user.username or user_to_mute.user.first_name}"
            if reason:
                mute_msg += f"\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
            # –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—è–∫—â–æ —î)
            if update.message.reply_to_message:
                # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø ID –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ -100
                chat_id_for_link = str(chat.id)[4:] if str(chat.id).startswith('-100') else chat.id
                msg_link = f"https://t.me/c/{chat_id_for_link}/{update.message.reply_to_message.message_id}"
                mute_msg += f"\nüîó –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {msg_link}"
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω–∞–º —É –ø—Ä–∏–≤–∞—Ç
            for admin in admins:
                if admin.user.is_bot:
                    continue
                try:
                    await context.bot.send_message(chat_id=admin.user.id, text=mute_msg)
                except:
                    pass  # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—ñ –∞–¥–º—ñ–Ω—ñ–≤: {e}")
        # –ê–≤—Ç–æ-–≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
    except Exception as e:
        msg = await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
# –ö–æ–º–∞–Ω–¥–∞ /unmute
async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /unmute - —Ä–æ–∑–º—É—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not update.message or not update.message.from_user:
        return
    admin_user = update.message.from_user
    chat = update.effective_chat
    if not chat:
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω–∞
    if not await is_user_admin(context, chat.id, admin_user.id):
        msg = await update.message.reply_text("–Ø –≤–ø–∏—Ö–Ω—É –∫–ª—è–ø —Ç–æ–±—ñ, —è–∫—â–æ –ø—Ä–æ–¥–æ–≤–∂–∏—à —Ç–∏–∫–∞—Ç–∏.")
        await schedule_message_deletion(context, chat.id, msg.message_id, 10)
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return
    user_to_unmute = None
    if context.args:
        username_or_id = context.args[0].lstrip('@')
        try:
            user_to_unmute = await context.bot.get_chat_member(chat.id, username_or_id)
            if user_to_unmute is None:
                msg = await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                await schedule_message_deletion(context, chat.id, msg.message_id, 10)
                await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
                return
        except Exception as e:
            msg = await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            await schedule_message_deletion(context, chat.id, msg.message_id, 10)
            await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
            return
    elif update.message.reply_to_message:
        try:
            user_to_unmute = await context.bot.get_chat_member(chat.id, update.message.reply_to_message.from_user.id)
            if user_to_unmute is None:
                msg = await update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                await schedule_message_deletion(context, chat.id, msg.message_id, 10)
                await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
                return
        except Exception as e:
            msg = await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            await schedule_message_deletion(context, chat.id, msg.message_id, 10)
            await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
            return
    else:
        msg = await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        await schedule_message_deletion(context, chat.id, msg.message_id, 10)
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return
    try:
        await context.bot.restrict_chat_member(
            chat_id=chat.id,
            user_id=user_to_unmute.user.id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_polls=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_change_info=False,
                can_invite_users=True,
                can_pin_messages=False
            )
        )
        # –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ø–∏—Å–∫—É
        muted_data = context.bot_data.get("muted_users", {}).get(str(chat.id), {})
        if str(user_to_unmute.user.id) in muted_data:
            del muted_data[str(user_to_unmute.user.id)]
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞ –¥–∏—Å–∫
            save_bot_data(context)
        unmute_message = f"@{user_to_unmute.user.username or user_to_unmute.user.first_name}, –∫–ª—è–ø –≤–∏–¥–∞–ª–µ–Ω–æ @{admin_user.username or admin_user.first_name}, –Ω–µ –∑–º—É—à—É–π —Ä–æ–±–∏—Ç–∏ —Ü–µ —â–µ —Ä–∞–∑!"
        msg = await update.message.reply_text(unmute_message)
        # –ê–≤—Ç–æ-–≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
    except Exception as e:
        msg = await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
# –ö–æ–º–∞–Ω–¥–∞ /sky - —á–∞—Ç –∑ AI
async def sky(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /sky - —á–∞—Ç –∑ —à—Ç—É—á–Ω–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç–æ–º"""
    if not GEMINI_API_KEY:
        msg = await update.message.reply_text("Gemini API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
        await schedule_message_deletion(context, update.effective_chat.id, msg.message_id, 10)
        await schedule_message_deletion(context, update.effective_chat.id, update.message.message_id, 10)
        return
    user = update.effective_user
    message_text = " ".join(context.args) if context.args else ""
    # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É - –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    if not message_text:
        greeting = (
            "–ü—Ä–∏–≤—ñ—Ç=) –Ø SkyNet! –î–æ–≥–ª—è–¥–∞—á –∑–∞ —á–∞—Ç–æ–º TOP BOYS CHAT. "
            "–ú–µ–Ω–µ –º–æ–∂–Ω–∞ –ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ –≤—Å–µ (–∑–∞–≤–¥—è–∫–∏ Gemini). "
            "–õ—é–¥–∏–Ω–∞, –Ω–µ –ø–æ—Ä—É—à—É–π –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç—É —ñ –ø–æ–≤–∞–∂–∞–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—é, "
            "–∞–±–æ —è –≤–∏—Ä–∞—Ö—É—é —ñ –∑–Ω–∞–π–¥—É —Ç–µ–±–µ (–∂–∞—Ä—Ç—É—é, –Ω–∞–ø–µ–≤–Ω–æ). "
            "- –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏? –ü—Ä–æ —â–æ –ø–æ–≥–æ–≤–æ—Ä–∏–º–æ?"
        )
        msg = await update.message.reply_text(greeting)
        await schedule_message_deletion(context, update.effective_chat.id, update.message.message_id, 10)
        # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
        return
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—é
        personality = context.bot_data.get("gemini_personality", "")
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏
        history = await get_conversation_context(user.id)
        # –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—î—é
        full_prompt = f"{personality}\n"
        if history:
            full_prompt += "–ü–æ–ø–µ—Ä–µ–¥–Ω—è —Ä–æ–∑–º–æ–≤–∞:\n" + "\n".join(history) + "\n"
        full_prompt += f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ({await get_user_name(user)}): {message_text}\n–ê—Å–∏—Å—Ç–µ–Ω—Ç:"
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini
        response = model.generate_content(full_prompt)
        reply_text = response.text.strip()
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—Ä–æ–∫ —Ä–æ–∑–º–æ–≤–∏
        await save_conversation_step(
            user_id=user.id,
            user_message=message_text,
            bot_response=reply_text,
            user_name=await get_user_name(user)
        )
        msg = await update.message.reply_text(reply_text)
        await schedule_message_deletion(context, update.effective_chat.id, update.message.message_id, 10)
        # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
    except Exception as e:
        error_msg = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI: {str(e)}"
        msg = await update.message.reply_text(error_msg)
        await schedule_message_deletion(context, update.effective_chat.id, update.message.message_id, 10)
        print(error_msg)
        # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
# –ö–æ–º–∞–Ω–¥–∞ /my_pepper - –ø–æ–∫–∞–∑—É—î —Ä–æ–∑–º—ñ—Ä –≤–∞—à–æ—ó –ª–∏–Ω–µ–π–∫–∏
async def my_pepper(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /my_pepper - –ø–æ–∫–∞–∑—É—î —Ä–æ–∑–º—ñ—Ä –≤–∞—à–æ—ó –ª–∏–Ω–µ–π–∫–∏."""
    user = update.effective_user
    chat = update.effective_chat
    if not chat or chat.type not in ['group', 'supergroup']:
        msg = await update.message.reply_text("ü•∫ –°–æ–ª–æ–¥–µ–Ω—å–∫–∏–π, —Ü—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–∞—Ö!")
        await schedule_message_deletion(context, chat.id, msg.message_id, 10)
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return
    reputations = context.bot_data.get("reputations", {})
    user_rep_key = f"{chat.id}_{user.id}"
    current_length = reputations.get(user_rep_key, 0)
    user_name = user.username or user.first_name
    msg = await update.message.reply_text(f"@{user_name}, –≤–∞—à–∞ –ª–∏–Ω–µ–π–∫–∞ {current_length} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ñ–≤! ü´°")
    # –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–æ–∑–º—ñ—Ä–æ–º –ª–∏–Ω–µ–π–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
    # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
# –ö–æ–º–∞–Ω–¥–∞ /pepper - –ø–æ–∫–∞–∑—É—î —Ç–æ–ø 3 –ª–∏–Ω–µ–π–∫–∏
async def pepper_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /pepper - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ª–∏–Ω–µ–π–∫–∞–º –≤ —á–∞—Ç–µ."""
    chat = update.effective_chat
    user = update.effective_user
    if not chat or chat.type not in ['group', 'supergroup']:
        msg = await update.message.reply_text("ü•∫ –°–æ–ª–æ–¥–µ–Ω—å–∫–∏–π, —Ü—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–∞—Ö!")
        await schedule_message_deletion(context, chat.id, msg.message_id, 10)
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return

    reputations = context.bot_data.get("reputations", {})
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    chat_reps = {
        key.split('_')[1]: length  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'key' –∑–∞–º—ñ—Å—Ç—å 'user_id'
        for key, length in reputations.items()
        if key.startswith(f"{chat.id}_") and isinstance(length, (int, float))
    }
    if not chat_reps:
        msg = await update.message.reply_text("–£ —Ü—å–æ–º—É —á–∞—Ç—ñ —â–µ –Ω–µ–º–∞—î –ª–∏–Ω–µ–µ–∫ üò¢")
        # –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω
        await schedule_message_deletion(context, chat.id, msg.message_id, 300)
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ª–∏–Ω—ã –ª–∏–Ω–µ–π–∫–∏ —ñ –±–µ—Ä–µ–º —Ç—ñ–ª—å–∫–∏ —Ç–æ–ø-3
    sorted_reps = sorted(chat_reps.items(), key=lambda item: item[1], reverse=True)[:3] # –¢—ñ–ª—å–∫–∏ —Ç–æ–ø-3
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
    leaderboard_lines = ["üèÜ –¢–æ–ø 3 –õ–∏–Ω–µ–π–∫–∏ —Ü—å–æ–≥–æ —á–∞—Ç—É:"]
    for i, (user_id_str, length) in enumerate(sorted_reps):
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
        try:
            member = await context.bot.get_chat_member(chat.id, int(user_id_str))
            user_name = member.user.username or member.user.first_name
            display_name = f"@{user_name}" if member.user.username else user_name
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º ID
            display_name = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id_str}"
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –º–µ—Å—Ç
        if i == 0:
            place = "ü•á"
        elif i == 1:
            place = "ü•à"
        elif i == 2:
            place = "ü•â"
        else:
            place = f"{i+1}."
        leaderboard_lines.append(f"{place} {display_name}: {length} —Å–º")

    leaderboard_text = "\n".join(leaderboard_lines) # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await update.message.reply_text(leaderboard_text)
    # –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω (300 —Å–µ–∫—É–Ω–¥)
    await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
    # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è

# --- –°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó (–õ–∏–Ω–µ–π–∫–∞) ---
async def handle_plus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ "+" —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ü—ñ–¥–≤–∏—â—É—î —Ä–µ–ø—É—Ç–∞—Ü—ñ—é (–ª–∏–Ω–µ–π–∫–∞) –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.
    """
    # –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Ç, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∏–ø
    chat = update.effective_chat
    if not chat or chat.type not in ['group', 'supergroup']:
        # –ù–µ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç–∞—Ö
        return
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–∏–π –Ω–∞–¥—ñ—Å–ª–∞–≤ "+"
    giver = update.effective_user
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ (—Ç–æ–±—Ç–æ –æ—Ç—Ä–∏–º—É–≤–∞—á "+")
    replied_to_message = update.message.reply_to_message
    receiver = replied_to_message.from_user
    # –ù–µ –º–æ–∂–Ω–∞ –¥–∞–≤–∞—Ç–∏ —Å–æ–±—ñ "+" 
    if giver.id == receiver.id:
        return
    # --- –õ–æ–≥—ñ–∫–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó ---
    # 1. –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ª–∏–Ω–µ–π–∫–∏ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞
    reputations = context.bot_data.setdefault("reputations", {})
    user_rep_key = f"{chat.id}_{receiver.id}"
    current_length = reputations.get(user_rep_key, 0)
    # 2. –ó–±—ñ–ª—å—à–∏—Ç–∏ –Ω–∞ 1
    new_length = current_length + 1
    # 3. –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    reputations[user_rep_key] = new_length
    save_bot_data(context) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
    # 4. –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    giver_name = giver.username or giver.first_name
    receiver_name = receiver.username or receiver.first_name
    response_text = (
        f"@{giver_name} –≤–µ—Å–µ–ª–æ –ø–æ—Å–º—ñ—Ö–∞—é—á–∏—Å—å –∑–±—ñ–ª—å—à–∏–≤ —Ç–≤–æ—é –ª–∏–Ω–µ–π–∫—É –Ω–∞ 1 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä üòã @{receiver_name}, "
        f"–ø—Ä–æ–¥–æ–≤–∂—É–π –ø—É–ø—Å–∏–∫ —Å–µ–±–µ –¥–æ–±—Ä–µ –ø–æ–≤–æ–¥–∏—Ç–∏ —ñ –≤—ñ–¥—Ä–æ—â—É–π —Å–≤–æ—é –ª–∏–Ω–µ–π–∫—É.\n"
        f"–í–∞—à–∞ –ª–∏–Ω–µ–π–∫–∞ {new_length} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ñ–≤!"
    )
    # 5. –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    msg = await update.message.reply_text(response_text)
    # 6. –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ª–∏–Ω–µ–π–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
    # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
async def handle_minus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ "-" —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ó–Ω–∏–∂—É—î —Ä–µ–ø—É—Ç–∞—Ü—ñ—é (–ª–∏–Ω–µ–π–∫–∞) –æ—Ç—Ä–∏–º—É–≤–∞—á–∞.
    """
    # –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Ç, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∏–ø
    chat = update.effective_chat
    if not chat or chat.type not in ['group', 'supergroup']:
        # –ù–µ –æ–±—Ä–æ–±–ª—è—î–º–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —á–∞—Ç–∞—Ö
        return
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–∏–π –Ω–∞–¥—ñ—Å–ª–∞–≤ "-"
    giver = update.effective_user
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ (—Ç–æ–±—Ç–æ –æ—Ç—Ä–∏–º—É–≤–∞—á "-")
    replied_to_message = update.message.reply_to_message
    receiver = replied_to_message.from_user
    # –ù–µ –º–æ–∂–Ω–∞ –¥–∞–≤–∞—Ç–∏ —Å–æ–±—ñ "-" 
    if giver.id == receiver.id:
        return
    # --- –õ–æ–≥—ñ–∫–∞ —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó ---
    # 1. –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ª–∏–Ω–µ–π–∫–∏ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞
    reputations = context.bot_data.setdefault("reputations", {})
    user_rep_key = f"{chat.id}_{receiver.id}"
    current_length = reputations.get(user_rep_key, 0)
    # 2. –ó–º–µ–Ω—à–∏—Ç–∏ –Ω–∞ 1 (–∞–ª–µ –Ω–µ –Ω–∏–∂—á–µ 0)
    new_length = max(current_length - 1, 0)
    # 3. –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    reputations[user_rep_key] = new_length
    save_bot_data(context) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
    # 4. –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    giver_name = giver.username or giver.first_name
    receiver_name = receiver.username or receiver.first_name
    response_text = (
        f"@{giver_name} –∑–∞—Å–º—É—á–µ–Ω–æ –∑–º–µ–Ω—à–∏–≤ —Ç–≤–æ—é –ª–∏–Ω–µ–π–∫—É –Ω–∞ 1 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä üòû @{receiver_name}, "
        f"–Ω–∞–¥—ñ—é—Å—å, —Ü–µ —Ç—ñ–ª—å–∫–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ.\n"
        f"–í–∞—à–∞ –ª–∏–Ω–µ–π–∫–∞ {new_length} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ñ–≤!"
    )
    # 5. –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    msg = await update.message.reply_text(response_text)
    # 6. –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ª–∏–Ω–µ–π–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
    # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
# –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ –∞–±–æ –∑–≥–∞–¥–æ–∫
IGNORED_COMMANDS = {"/mute", "/muty", "/ban", "/alert", "/report", "/date", "/who"}
# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø handle_reply_or_mention ---
async def handle_reply_or_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä—è–º—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º."""
    # print(f"DEBUG: handle_reply_or_mention triggered for message ID {update.message.message_id if update.message else 'N/A'}")
    if not update.message or not update.message.from_user:
        # print("DEBUG: No message or user, returning.")
        return
    message_text = update.message.text
    if not message_text:
        # print("DEBUG: No message text, returning.")
        return
    user = update.message.from_user
    chat = update.effective_chat
    bot_username = context.bot.username
    # --- –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
    should_process = False
    replied_to_text = ""
    context_for_gemini = ""
    is_reply_scenario = False # –§–ª–∞–≥, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–Ω–µ –æ—Ç–≤–µ—Ç)
    is_direct_mention = (
        f"@{bot_username}" in message_text and
        not update.message.reply_to_message
    )
    # print(f"DEBUG: is_direct_mention = {is_direct_mention}")
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–û–¢–ê (—Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑)
    is_reply_to_bot = False
    if update.message.reply_to_message and update.message.reply_to_message.from_user:
        replied_to_user = update.message.reply_to_message.from_user
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞—é—Ç, –Ω–∞—à–∏–º –±–æ—Ç–æ–º
        if replied_to_user.is_bot and replied_to_user.id == context.bot.id:
            is_reply_to_bot = True
            is_reply_scenario = True
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
            replied_to_text = update.message.reply_to_message.text or update.message.reply_to_message.caption or ""
            # print(f"DEBUG: is_reply_to_bot = True, replied_to_text = '{replied_to_text}'")
    # print(f"DEBUG: is_reply_to_bot = {is_reply_to_bot}")
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –£–ß–ê–°–¢–ù–ò–ö–ê —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
    is_reply_to_user_with_mention = False
    if update.message.reply_to_message and update.message.reply_to_message.from_user:
        replied_to_user = update.message.reply_to_message.from_user
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï –±–æ—Ç –∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        if not replied_to_user.is_bot and f"@{bot_username}" in message_text:
            is_reply_to_user_with_mention = True
            is_reply_scenario = True
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
            replied_to_text = update.message.reply_to_message.text or update.message.reply_to_message.caption or ""
            replied_user_name = await get_user_name(replied_to_user)
            # print(f"DEBUG: is_reply_to_user_with_mention = True, replied_to_text = '{replied_to_text}', user = {replied_user_name}")
    # print(f"DEBUG: is_reply_to_user_with_mention = {is_reply_to_user_with_mention}")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_direct_mention or is_reply_to_bot or is_reply_to_user_with_mention:
        should_process = True
        # print("DEBUG: should_process = True")
    else:
        # print("DEBUG: should_process = False")
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    # --- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ---
    if should_process:
        # print("DEBUG: Processing the message...")
        if not GEMINI_API_KEY:
            error_msg = "Gemini API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ."
            print(error_msg)
            error_reply = await update.message.reply_text(error_msg)
            await schedule_message_deletion(context, chat.id, error_reply.message_id, 10)
            # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É
            return
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ)
            clean_query_text = message_text.replace(f"@{bot_username}", "").strip()
            # print(f"DEBUG: Cleaned query text: '{clean_query_text}'")
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Gemini
            personality = context.bot_data.get("gemini_personality", "")
            history = await get_conversation_context(user.id)
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
            context_for_gemini = f"{personality}\n"
            if history:
                context_for_gemini += "–ü–æ–ø–µ—Ä–µ–¥–Ω—è —Ä–æ–∑–º–æ–≤–∞:\n" + "\n".join(history) + "\n"
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç–≤–µ—Ç–∞ (–Ω–∞ –±–æ—Ç–∞ –∏–ª–∏ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞), –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if is_reply_scenario and replied_to_text:
                if is_reply_to_bot:
                     context_for_gemini += f"[–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞: {replied_to_text}]\n"
                elif is_reply_to_user_with_mention:
                     context_for_gemini += f"[–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {replied_user_name}: {replied_to_text}]\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name = await get_user_name(user)
            context_for_gemini += f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ({user_name}): {clean_query_text}\n–ê—Å–∏—Å—Ç–µ–Ω—Ç:"
            # print(f"DEBUG: Final prompt to Gemini:\n{context_for_gemini}\n---END---")
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini
            response = model.generate_content(context_for_gemini)
            reply_text = response.text.strip()
            # print(f"DEBUG: Gemini response: '{reply_text}'")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            # –î–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_message_to_save = clean_query_text
            if is_reply_to_user_with_mention and replied_to_text:
                 user_message_to_save = f"[–ü—Ä–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è '{replied_to_text}' –≤—ñ–¥ {replied_user_name}] {clean_query_text}"
            elif is_reply_to_bot and replied_to_text:
                 user_message_to_save = f"[–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ '{replied_to_text}'] {clean_query_text}"
            await save_conversation_step(
                user_id=user.id,
                user_message=user_message_to_save,
                bot_response=reply_text,
                user_name=user_name
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            # –°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ù–ï —É–¥–∞–ª—è–µ—Ç—Å—è
            await update.message.reply_text(reply_text)
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï —É–¥–∞–ª—è–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –±–æ—Ç—É –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –¥–∏–∞–ª–æ–≥–∞
        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI: {str(e)}"
            print(error_msg) # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_reply = await update.message.reply_text(error_msg)
            await schedule_message_deletion(context, chat.id, error_reply.message_id, 10)
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï —É–¥–∞–ª—è–µ—Ç—Å—è
        # –í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
        return
    # --- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ---
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    first_word_cmd = message_text.split(maxsplit=1)[0].split('@')[0].lower()
    if first_word_cmd in IGNORED_COMMANDS:
        await schedule_message_deletion(context, chat.id, update.message.message_id, 10)
        return
    # –ï—Å–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
    # print("DEBUG: Message did not match any processing criteria, ignoring.")
    return # –Ø–≤–Ω—ã–π return –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    # –ö–Ω–æ–ø–∫–∞ "–ú—É—Ç–∏" –≤ /start
    if query.data == "show_groups":
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω–æ–º —Ö–æ—á–∞ –± –≤ –æ–¥–Ω—ñ–π –≥—Ä—É–ø—ñ
        groups = context.bot_data.get("groups", {})
        user_groups = []
        for group_id_str, group_data in groups.items():
            group_id = int(group_id_str) if isinstance(group_id_str, str) else group_id_str
            if await is_user_admin(context, group_id, user_id):
                user_groups.append((group_id, group_data["title"]))
        if not user_groups:
            await query.edit_message_text("–Ø –≤–ø–∏—Ö–Ω—É –∫–ª—è–ø —Ç–æ–±—ñ, —è–∫—â–æ –ø—Ä–æ–¥–æ–≤–∂–∏—à —Ç–∏–∫–∞—Ç–∏.")
            return
        buttons = []
        for group_id, title in user_groups:
            buttons.append([InlineKeyboardButton(title, callback_data=f"group_mutes_{group_id}")])
        if not buttons:
            await query.edit_message_text("–Ø –≤–ø–∏—Ö–Ω—É –∫–ª—è–ø —Ç–æ–±—ñ, —è–∫—â–æ –ø—Ä–æ–¥–æ–≤–∂–∏—à —Ç–∏–∫–∞—Ç–∏.")
            return
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É:", reply_markup=reply_markup)
        # query.message (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
    # –ö–Ω–æ–ø–∫–∞ "Gemini –ü–µ—Ä—Å–æ–Ω–∞"
    elif query.data == "gemini_personality":
        personality = context.bot_data.get("gemini_personality", "")
        await query.edit_message_text(
            f"–ü–æ—Ç–æ—á–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞ Gemini:\n{personality}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å –ø–µ—Ä—Å–æ–Ω–∏:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]])
        )
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω, —â–æ –æ—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∏
        context.user_data["waiting_for_personality"] = True
        # query.message (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
    # –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    elif query.data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("–ú—É—Ç–∏ üîá", callback_data="show_groups")],
            [InlineKeyboardButton("Gemini –ü–µ—Ä—Å–æ–Ω–∞ ü§ñ", callback_data="gemini_personality")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º—É—Ç–∞–º–∏.", reply_markup=reply_markup)
        # query.message (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
    # –û–±—Ä–∞–Ω–æ –≥—Ä—É–ø—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –º—É—Ç—ñ–≤
    elif query.data.startswith("group_mutes_"):
        chat_id = int(query.data.split("_")[-1])
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω–æ–º —Ü—ñ—î—ó –≥—Ä—É–ø–∏
        if not await is_user_admin(context, chat_id, user_id):
            await query.edit_message_text("–Ø –≤–ø–∏—Ö–Ω—É –∫–ª—è–ø —Ç–æ–±—ñ, —è–∫—â–æ –ø—Ä–æ–¥–æ–≤–∂–∏—à —Ç–∏–∫–∞—Ç–∏.")
            return
        muted_users = []
        try:
            muted_list = context.bot_data.get("muted_users", {}).get(str(chat_id), {})
            for user_id_str, data in muted_list.items():
                user_id_int = int(user_id_str) if isinstance(user_id_str, str) else user_id_str
                muted_users.append((user_id_int, data['username']))
        except Exception as e:
            await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            return
        if not muted_users:
            text = "–ù–µ–º–∞—î –∑–∞–º—É—á–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
            await query.edit_message_text(text)
            return
        buttons = []
        for user_id, username in muted_users:
            buttons.append([InlineKeyboardButton(f"@{username}", callback_data=f"unmute_confirm_{user_id}_{chat_id}")])
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text("–°–ø–∏—Å–æ–∫ –∫–ª—è–ø—ñ–≤:", reply_markup=reply_markup)
        # query.message (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑–º—É—Ç—É
    elif query.data.startswith("unmute_confirm_"):
        parts = query.data.split("_")
        user_id_to_unmute = int(parts[2])
        chat_id = int(parts[3])
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω–æ–º —Ü—ñ—î—ó –≥—Ä—É–ø–∏
        if not await is_user_admin(context, chat_id, query.from_user.id):
            await query.edit_message_text("–Ø –≤–ø–∏—Ö–Ω—É –∫–ª—è–ø —Ç–æ–±—ñ, —è–∫—â–æ –ø—Ä–æ–¥–æ–≤–∂–∏—à —Ç–∏–∫–∞—Ç–∏.")
            return
        try:
            user = await context.bot.get_chat_member(chat_id, user_id_to_unmute)
            username = user.user.username or user.user.first_name
            confirm_button = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –¢–∞–∫, –∑–Ω—è—Ç–∏ –∫–ª—è–ø", callback_data=f"confirm_unmute_{user_id_to_unmute}_{chat_id}")],
                [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"group_mutes_{chat_id}")]])
            await query.edit_message_text(
                f"–ó–Ω—è—Ç–∏ –∫–ª—è–ø –∑ @{username}?",
                reply_markup=confirm_button
            )
            # query.message (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
        except Exception as e:
            await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —Ä–æ–∑–º—É—Ç
    elif query.data.startswith("confirm_unmute_"):
        parts = query.data.split("_")
        user_id_to_unmute = int(parts[2])
        chat_id = int(parts[3])
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω–æ–º —Ü—ñ—î—ó –≥—Ä—É–ø–∏
        if not await is_user_admin(context, chat_id, query.from_user.id):
            await query.edit_message_text("–Ø –≤–ø–∏—Ö–Ω—É –∫–ª—è–ø —Ç–æ–±—ñ, —è–∫—â–æ –ø—Ä–æ–¥–æ–≤–∂–∏—à —Ç–∏–∫–∞—Ç–∏.")
            return
        try:
            user = await context.bot.get_chat_member(chat_id, user_id_to_unmute)
            username = user.user.username or user.user.first_name
            admin_username = query.from_user.username or query.from_user.first_name
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id_to_unmute,
                permissions=ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_polls=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True,
                    can_change_info=False,
                    can_invite_users=True,
                    can_pin_messages=False
                )
            )
            # –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ø–∏—Å–∫—É
            muted_data = context.bot_data.get("muted_users", {}).get(str(chat_id), {})
            if str(user_id_to_unmute) in muted_data:
                del muted_data[str(user_id_to_unmute)]
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞ –¥–∏—Å–∫
                save_bot_data(context)
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É
            unmute_msg = f"@{username}, –∫–ª—è–ø –≤–∏–¥–∞–ª–µ–Ω–æ @{admin_username}, –Ω–µ –∑–º—É—à—É–π —Ä–æ–±–∏—Ç–∏ —Ü–µ —â–µ —Ä–∞–∑!"
            await context.bot.send_message(chat_id=chat_id, text=unmute_msg)
            await query.edit_message_text(f"–ö–ª—è–ø –∑–Ω—è—Ç–∏–π –∑ @{username}!")
            # query.message (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
        except Exception as e:
            await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")
# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∏ Gemini)
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    # –Ø–∫—â–æ –æ—á—ñ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∏
    if context.user_data.get("waiting_for_personality"):
        personality = update.message.text
        context.bot_data["gemini_personality"] = personality
        save_bot_data(context)
        context.user_data["waiting_for_personality"] = False
        msg = await update.message.reply_text("–ü–µ—Ä—Å–æ–Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞!")
        await schedule_message_deletion(context, update.effective_chat.id, update.message.message_id, 10)
        # msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
        # –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("–ú—É—Ç–∏ üîá", callback_data="show_groups")],
            [InlineKeyboardButton("Gemini –ü–µ—Ä—Å–æ–Ω–∞ ü§ñ", callback_data="gemini_personality")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        menu_msg = await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º—É—Ç–∞–º–∏.", reply_markup=reply_markup)
        await schedule_message_deletion(context, update.effective_chat.id, update.message.message_id, 10)
        # menu_msg (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞) –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è
# –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≥—Ä—É–ø —á–µ—Ä–µ–∑ –±—É–¥—å-—è–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def track_chats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ñ–¥—Å—Ç–µ–∂—É—î –≥—Ä—É–ø–∏, –¥–µ –±–æ—Ç —î"""
    chat = update.effective_chat
    if chat and chat.type in ['group', 'supergroup']:
        groups = context.bot_data.setdefault("groups", {})
        groups[str(chat.id)] = {"title": chat.title or f"–ì—Ä—É–ø–∞ {chat.id}"}
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–∏ –∑–º—ñ–Ω—ñ
        save_bot_data(context)
# --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í main() ---
def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –±–æ—Ç–∞"""
    app = Application.builder().token(BOT_TOKEN).post_init(post_init).build()
    # –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤
    app.add_handler(CommandHandler("date", date))
    app.add_handler(CommandHandler("who", who))
    # –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –º—É—Ç-—Å–∏—Å—Ç–µ–º–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("muty", muty))
    app.add_handler(CommandHandler("mute", mute))
    app.add_handler(CommandHandler("unmute", unmute))
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è AI
    app.add_handler(CommandHandler("sky", sky))
    # –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó
    app.add_handler(CommandHandler("my_pepper", my_pepper))
    app.add_handler(CommandHandler("pepper", pepper_leaderboard))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (+/-) - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –ø–æ—Å–ª–µ, 
    # —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.REPLY & filters.Regex(r'^\+$'), handle_plus), group=1) 
    app.add_handler(MessageHandler(filters.REPLY & filters.Regex(r'^-$'), handle_minus), group=1) 
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler), group=2) # group=2, –µ—Å–ª–∏ text_handler –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ, —á—Ç–æ –Ω–µ –ø–æ–π–º–∞–ª handle_reply_or_mention
    # === –í–ê–ñ–ù–û: –ü–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===
    # handle_reply_or_mention –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –∏–ª–∏ –ø–æ—á—Ç–∏ –ø–µ—Ä–≤—ã–º, 
    # —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º group=0 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reply_or_mention), group=0) 
    # track_chats - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤, –¥–æ–ª–∂–Ω–æ –∏–¥—Ç–∏ –ø–æ–∑–∂–µ
    app.add_handler(MessageHandler(filters.ALL, track_chats), group=3) 
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    app.run_polling()
if __name__ == '__main__':
    main()